#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    armLeftE,       sensorPotentiometer)
#pragma config(Sensor, in2,    backWheelE,     sensorPotentiometer)
#pragma config(Sensor, in3,    backFlipPot,    sensorPotentiometer)
#pragma config(Sensor, in4,    autoSelect,     sensorPotentiometer)
#pragma config(Sensor, in5,    memoryPot,      sensorPotentiometer)
#pragma config(Sensor, in8,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  backLimit,      sensorTouch)
#pragma config(Sensor, dgtl2,  autoBumper,     sensorTouch)
#pragma config(Sensor, dgtl12, autoOverride,   sensorTouch)
#pragma config(Sensor, I2C_1,  frontRightE,    sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  backRightE,     sensorNone)
#pragma config(Sensor, I2C_3,  frontLeftE,     sensorNone)
#pragma config(Sensor, I2C_4,  backleftE,      sensorNone)
#pragma config(Motor,  port1,           armLeft,       tmotorVex393, openLoop)
#pragma config(Motor,  port2,           backLeft,      tmotorVex393, openLoop)
#pragma config(Motor,  port3,           frontLeft,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port4,           intake,        tmotorVex393HighSpeed, openLoop, reversed)
#pragma config(Motor,  port5,           winch,         tmotorServoStandard, openLoop)
#pragma config(Motor,  port7,           memoryMtr,     tmotorVex269, openLoop)
#pragma config(Motor,  port8,           frontRight,    tmotorVex393, openLoop, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port9,           backRight,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port10,          armRight,      tmotorVex393, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


#pragma platform(VEX)

#define spinJoy Ch1
#define crabJoy Ch4
#define fwdJoy Ch3

//forewarning, I can't spell for my life, also all line numbers referenced are subject to change, but should get you in the right area.

task main()
{
	const int maxPower = 127; //max power of vex motors
	float powerPercent = 1; //var to set power to the bot
	float power = 0; //power to write to motors

	//A bunch of vars for the program, should be self explainitory
	int armMotor;
	int crabVal;
	int spinVal;
	int forwardVal;

	bool fwd = false;
	bool bwd = false;

	char encoderVal[15];
	char powerVal[15];

	bool fwdJoyTog = false;

	bool spinJoyTog = false;
	bool leftSpin = false;
	bool rightSpin = false;

	bool crabJoyTog = false;
	bool crabLeft = false;
	bool crabRight = false;

	bool armTog = false;
	bool upArm = false;
	bool downArm = false;

	bool intakeTog = false;
	bool intakeIn = false;
	bool intakeOut = false;
	bool intakeOff = false;
	bool intakePrintTog = false;

	bool fwdNotCrab = true;

	int intakeVal;

	clearDebugStream();

	while (true)
	{
		//A bunch of buttons on the VEX partner remote allow for the remapping of power
	  //I had difficulties using the joystick on the main remote to change the power like most people do in Driver Control
	  //So to fix this the power is fixed and the Joysticks just determine direction. You can change the power of the motors
		//Using these buttons on the partner remote
		if (vexRT[Btn7UXmtr2] == 1)
		{
			powerPercent = 0.1;
		}
		if (vexRT[Btn7LXmtr2] == 1)
		{
			powerPercent = 0.2;
		}
		if (vexRT[Btn7DXmtr2] == 1)
		{
			powerPercent = 0.3;
		}
		if (vexRT[Btn7RXmtr2] == 1)
		{
			powerPercent = 0.4;
		}
		if (vexRT[Btn8UXmtr2] == 1)
		{
			powerPercent = 0.5;
		}
		if (vexRT[Btn8LXmtr2] == 1)
		{
			powerPercent = 0.6;
		}
		if (vexRT[Btn8DXmtr2] == 1)
		{
			powerPercent = 0.7;
		}
		if (vexRT[Btn8RXmtr2] == 1)
		{
			powerPercent = 0.8;
		}
		if (vexRT[Btn5UXmtr2] == 1)
		{
			powerPercent = 0.9;
		}
		if (vexRT[Btn6UXmtr2] == 1)
		{
			powerPercent = 1.0;
		}
		//How I calculate the power since max power for vex is 127, not 100, so 50% power is 63.5 power
		power = powerPercent*maxPower;

		//Super useful button to clear the debug stream, basically for when you mess up with your route and want to restart the recording
		if (vexRT[Btn7U] == 1)
		{
			clearDebugStream();
		}

		//I had huge issues with crabbing, so at the end of the day I had to make it a toggle. What this means is that the
		//left joystick controls forward, backwards, and crabbing, fwd/bwd being on the y axis while crab is on the x axis of
		//the joystick. However, it is locked to on fwd/bwd movement when the program is started up. By pressing BTN 8R, this
		//allows for only crab movements to be made and recorded. So you bassically have to use this button to toggle between
		//either forward/backward movement, or crabbing on the left joystick. The reason this even is needed is because while
		//going forward, its common to sway a little bit into the x axis, causing the program to think you want to crab. And
		//since there is no variable power in Auto Auto, it would cause the bot to crab for like 1 degree at full power,
		//causing issues with the debug stream print out and the actual possiton of the bot. There is probably a way to fix
		//this, but wasnt worth the time to figure out during the season.
		if (vexRT[Btn8U] == 1)
		{
			fwdNotCrab = true;
		}

		//Two button toggle because I'm lazy, but ended up being more helpful. You know when you press 8U the bot will be in
		//fwd/bwd movement, and vise versa with 8R, instead of guessing which state the toggle is in and accidentally messing up
		//the recording in the debug stream.

		if (vexRT[Btn8R] == 1)
		{
			fwdNotCrab = false;
		}

		//controls

		//A warning, this is were things get confusing, even for me. I'm commenting this code months after i wrote this section,
		//which took a good month to figure out. So bare with me here, I'll do my best to explain this messy code.

		//first conditinal checks that the bot is in fwd/bwd mode and not crab mode.
		if (fwdNotCrab == true){
		if (vexRT[fwdJoy] >= 10)//Adds a thershhold of +10 to set values
		{
			//so if someone is pushing the fwdJoy in the possitive y direction, turn all of these vars to these states
			fwdJoyTog = true;
			fwd = true;

			//this is setting the fwd power car to the global power var, which was dicussed earlier in the code
			forwardVal = power; //sets + joy values to varibles
		}
		//seeing if the joy is being pushed in the negative y direction, meaning the bot should go backwards
		else if (vexRT[fwdJoy] <= -10)//Adds a thershhold of -10 to set values
		{
			fwdJoyTog = true;
			bwd = true;
			forwardVal = -power; //sets - joy values to varibles
		}
		//If the fwdJoy is not being touched, then check all this:
		else
		{
			if (fwdJoyTog == false)//if there is no input to the fwdJoy,
			{
			if (crabJoyTog == false)//if there is no input to the crabJoy,
			{
				if(spinJoyTog == false)//if there is no input to the spinJoy,
				{
					SensorValue[frontRightE] = 0; //clear the encoder on the front wheel(which is used for all encoder values)
					//when the bot isnt moving, basically  resetting the bot for the next move.
					//The reason for this is to make sure that while youre trying to spin the bot, the code isnt clearing the encoder
					//because its all like "Oh hey, no one is trying to move forward so I better clear the encoder" which is the same
					//encoder the spin is using to record its turn. Which would result in 0 being pritned out over and over again.
					//*Skip this next explination unless you have a good grasp on what is going on, it's not critical*
					//(If you really get into the code you'll realise that the spin is done with a gyro instead of a encoder, but
					//it used to be done with the same encoder, and could be swiched back to one if your team does not own a gyro
					//(which i would really recomend you get one, they are amazing). So yeah it is possible to do without a gyro.)
				}}
			}else{//This is an else statment to the first if statement above: 	if (fwdJoyTog == false)
			//so if fwdJoyTog is true, which got changed to true if the fwdjoy was moving in the positive or negative
			//Y direction, see above (line ~167 & 176).

			//so an important note here is that the only way the code will get to the above else statement, is if the if on line 164
			//and the else if on line 174 evalutate to be false. So basically while the fwdJoy is being pushed forward, the code stays in
			//the if on line 164 and writes the power to the bot (bottom of the code) so that it moves forward.
			//So then when you return the fwdJoy to 0, the code goes to the else on line 181, but the if on line 183 evaluates to be
			//false, since fwdJoyTog is still true from the if on line 164, bringing us here to this else. So this code will
			//only activate once per movement, since fwdJoyTog gets reset to false at the end of this code. So this is the code
			//that prints the last movement to the debugstream. And the next loop through the code goes to line 189, resetting the
			//encoder for the next move. Thus, the next time you move fwdJoy the bot will move, causing the encoder to count,
			//and that value will get printed out using the code below. And the cycle continues indefinatly.


					//this if detecs if the bot was going forward (fwdJoy was positive Y) or backwards (fwdJoy negative Y) which will be
					//delt with below
					if (fwd == true)// meaning the bot went forward
					{
						//so we conver our current encoder value and power values from ints to strings and store them in our
						//char arrays that we declared at the top of the code.
						sprintf(encoderVal, "%d", abs(SensorValue[frontRightE]));
						sprintf(powerVal, "%d", power);

						//then we start to write to the debug stream all of our data, in the exact format that our functions use.
						//You can edit this to mimic your own functions, or use my included functions: MechWheelFunctions.
						//In MechWheelFunctions, the function for forward looks like "forwardFour(pwr, degs);" where pwr and degs
						//are arguments for power and degrees, respectivly. So, we print out EXACTLY what we want the code to look
						//like, right down to the simi colon to finish of the statement. This way we can copy and paste the code
						//directly from the debug stream to an autnomous section in a comp code. As you can see we print out the
						//start of the function, followed by the power, then a comma, then the encoder value, the end it with a close
						//parenthase and a simicolon.
						//An important distinction to remeber is that this is literally text, the program does not "realize" it is
						//printing code. I could make it print the word "apple" whenever the bot moves forward, but instead I'm
						//telling it to print letters that correspong directly to my fucntions code, so that when they are pasted
						//into another file with correct pragmas, etc. It'll execute the move you just drove it to do perfectly.
						writeDebugStream("forwardFour(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");

						//resetting the vars so that this doesnt get stuck in an endless loop :P Also ensures that the information is only printed
						//once then the encoder is reset.
						fwd = false;
						fwdJoyTog = false;
					}else{

						//if fwd = false, then it must be going backwards. So here is the same code, just using backwardFour instead of ForwardFour
						sprintf(encoderVal, "%d", abs(SensorValue[frontRightE]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("backwardFour(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						bwd = false;
						fwdJoyTog = false;
				}
			}
			//this is if fwd is not moving, then neither should the bot, so this sets forwardVal (the var that is written to the motors at the
			//bottom of the code) to 0, thus stopping the bot.
			forwardVal = 0;
		}
	}

	//the rest of the code is the same except coded for crabbing and spinning. Ill add comments were necisary but for the most part is the same
	//concept.


		if(fwdNotCrab == false){//this is the var that is changed at line 152, to enable crab on fwdJoy

		//positive is crab right
		if (vexRT[crabJoy] >= 10 )//Adds a thershhold of +10 to set values
		{
			crabJoyTog = true;
			crabRight = true;
			crabVal = power; //sets + joy values to varibles
		}
		else if (vexRT[crabJoy] <= -10 )//Adds a thershhold of -10 to set values
		{
			crabJoyTog = true;
			crabLeft = true;
			crabVal = -power; //sets - joy values to varibles
		}
		else
		{
			//if (fwdJoyTog == false) I cant remember why you don't need this line, but you don't so yeah :P
			//{
			if (crabJoyTog == false)
			{
				if(spinJoyTog == false)
				{
					SensorValue[frontRightE] = 0;
				}
			}else{
					if (crabRight == true)
					{
						sprintf(encoderVal, "%d", abs(SensorValue[frontRightE]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("crabRight(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						crabRight = false;
						crabJoyTog = false;
					}else {
						sprintf(encoderVal, "%d", abs(SensorValue[frontRightE]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("crabLeft(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						crabLeft = false;
						crabJoyTog = false;

				}
			}
			crabVal = 0;
		}
	}

		//Setting variables for Spin
		if (vexRT[spinJoy] >= 10)
		{
			spinJoyTog = true;
			rightSpin = true;
			spinVal = power; //sets + joy values to varibles
		}
		else if(vexRT[spinJoy] <= -10)
		{
			spinJoyTog = true;
			leftSpin = true;
			spinVal = -power;
		}
		else
		{
			if (spinJoyTog == false)
			{
			if (crabJoyTog == false)//pretty sure you don't need this if and the next one here, since
															//spinning uses a gyro and not the same encoder as crab and fwd, but
															//I left it here in case you dont have a gyro, this should all work
															//with an encoder with a little tweaking to this section and to the
															//spin function in MechWheelFunctions.c
			{
				if(fwdJoyTog == false)
				{
					SensorValue[gyro] = 0;
				}}
			}else{
					if (rightSpin == true)// meaning the bot went right
					{
						sprintf(encoderVal, "%d", abs(SensorValue[gyro]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("rightSpin(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						rightSpin = false;
						spinJoyTog = false;
					}else{
						sprintf(encoderVal, "%d", abs(SensorValue[gyro]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("leftSpin(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						leftSpin = false;
						spinJoyTog = false;
				}
			}
			spinVal = 0;
		}


		//Setting variables for arms up
		if (vexRT[Btn6U]== 1 && vexRT[Btn6D]== 0 )//Checks for single button press
		{
			armTog = true;
			upArm = true;
			armMotor = power;
		}
		else if (vexRT[Btn6U]== 0 && vexRT[Btn6D]== 1  )//Checks for single button press
		{
			armTog = true;
			downArm = true;
			armMotor = -power;
		}else{
			if(armTog == false)
			{
				//SensorValue[armRightE] = 0;
				//this is incase you have an encoder on your arm system instead of a potentionmeter like we used.
				//so with a little tweaking to this section and to the armUp and armDown functions in MechWheelFunctions.c
				//you could get this to work with an encoder instead of a pot.
			}else{
				if(upArm == true)
				{
						sprintf(encoderVal, "%d", abs(SensorValue[armLeftE]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("armUp(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						upArm = false;
						armTog = false;
					}else{
						sprintf(encoderVal, "%d", abs(SensorValue[armLeftE]));
						sprintf(powerVal, "%d", power);
						writeDebugStream("armDown(");
						writeDebugStream(powerVal);
						writeDebugStream(",");
						writeDebugStream(encoderVal);
						writeDebugStreamLine(");");
						downArm = false;
						armTog = false;
				}
			}
			armMotor = 0;
		}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		//this next code is for an intake, which is different from the other sections of the code. Instead of using an encoder on the intake,
		//we discovered that you usually want to leave the intake on for a little while of the program. So this section makes the intake act
		//like a toggle, so you push button 5U and the intake intakes inward. So you keep holding the intake in button while you do your
		//movements, and then let go. Instead of using a function for this, we literally just turn the intake on and off by writting a
		//power varable directly to the intake motor. So the debug stream will print out "motor[intake]=127" or whatever power you were
		//on. When you let go it'll print out "motor[intake]=0" so when you copy and paste the intake will turn on and off for the right duration.

		if (vexRT[Btn5U]== 1 && vexRT[Btn5D]== 0 )//Checks for single button press
		{
			intakeTog = true;
			intakeIn = true;
			intakeVal = power;
			if(intakePrintTog == false)
			{
				sprintf(powerVal, "%d", power);
				writeDebugStream("motor[intake]= ");
				writeDebugStream(powerVal);
				writeDebugStreamLine(";");
				intakePrintTog = true;
			}
		}
		else if (vexRT[Btn5U]== 0 && vexRT[Btn5D]== 1  )//Checks for single button press
		{
			intakeTog = true;
			intakeOut = true;
			intakeVal = -power;
			if(intakePrintTog == false)
			{
				sprintf(powerVal, "%d", power);
				writeDebugStream("motor[intake]= -");
				writeDebugStream(powerVal);
				writeDebugStreamLine(";");
				intakePrintTog = true;
			}
		}else{
		//the above code should is similar to the other code, so you should be able to understand it.
		//all below does is check if the intake needs to be turned off and if so does so, as well as
		//prints the off statement. Again, you should be able to figure this all out based on the
		//other code
			if(intakeTog == false)
			{
				if(intakeOff == true)
				{
					writeDebugStreamLine("motor[intake]= 0;");
					intakeOff = false;
				}
			}else{
				if(intakeIn == true)
				{
						intakeIn = false;
						intakeTog = false;
						intakeOff = true;
						intakePrintTog = false;

					}else{
						intakeOut = false;
						intakeTog = false;
						intakeOff = true;
						intakePrintTog = false;
				}
			}
			intakeVal = 0;
		}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		//Values to write values from each side, in order to make setting varibales above easier
		//NOTE: Do NOT change these to negative values if the bot its running in reverse, reverse the motor
		//in the pragma.

		//This is were we write the vars that we assigned throughout the code so that the bot actually moves. Pretty simple stuff here.

		motor[frontRight] = forwardVal - spinVal - crabVal;
		motor[backRight] = forwardVal - spinVal + crabVal;
		motor[frontLeft] = forwardVal + spinVal + crabVal;
		motor[backLeft] = forwardVal + spinVal - crabVal;
		motor[armRight] = armMotor + 20 ;
		motor[armLeft] = armMotor + 20;
		motor[intake] = intakeVal;

		//These next few lines are in case you wanted to have an arm limit in auto auto. I wouldnt worry so much about what memoryPot is,
		//just add an arm limit here if you desire (so your bot doesnt flip while running auto auto ;P

		/*	if(SensorValue[armLeftE] < SensorValue[memoryPot])
		{
			motor[armRight] = armMotor - 30 ;
			motor[armLeft] = armMotor - 30;
		}*/


		//That's it! Feel free to contact me on the fourms on email me at mover333@gmail.com

		//You are free to make any edits and this code is public, but please give any credit for the original code to me, Mitchell Overfield.

		//Thanks for anyone and everyone who makes VEX possible, it has changed my life and I am forever grateful for these oppertunities.

}


}
