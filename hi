#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_3,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_4,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_5,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_6,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_7,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_8,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           FTL,           tmotorVex393_HBridge, openLoop, driveLeft)
#pragma config(Motor,  port2,           BCL,           tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port3,           BCR,           tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port4,           TPL,           tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_3)
#pragma config(Motor,  port5,           TPR,           tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_4)
#pragma config(Motor,  port6,           BTL,           tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_5)
#pragma config(Motor,  port7,           BTR,           tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_6)
#pragma config(Motor,  port8,           RC1,           tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_7)
#pragma config(Motor,  port9,           RC2,           tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_8)
#pragma config(Motor,  port10,          FTR,           tmotorVex393_HBridge, openLoop, reversed, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
Christian Tracy & Adam McKenney's Vex Custom Competition Template.
This program is designed to be used with the following include files:

Tracy_and_McKenney's_Vex_LCD_Includes.h
Tracy_and_McKenney's_Vex_Extra_Includes.h
Tracy_and_McKenney's_Vex_Competition_Includes.c

Those files should be in the same directory as Custom_Vex_Competition_Template.c (this file)
Documentation on the include files is located inside each file.
*/

//////////////////////////////////////////////////////////////
#pragma platform(VEX)																				//
#pragma competitionControl(Competition)											//
#pragma autonomousDuration(20)															//	<---Main Competition Code
#pragma userControlDuration(120)														//				!!DO NOT MODIFY!!
#include "Tracy_and_McKenney's_Vex_LCD_Includes.h"					//
#include "Tracy_and_McKenney's_Vex_Extra_Includes.h"				//
#include "Tracy_and_McKenney's_Vex_Competition_Includes.c"	//
//////////////////////////////////////////////////////////////

void pre_auton()
{	//Code here will run at startup. Robot will not enter autonomous or usercontrol while this funtion is running.

  bStopTasksBetweenModes = false;	//Set bStopTasksBetweenModes to true to stop all tasks, including lcdScreen,
  																//immediately before and after autonomous and user control.
  																//It is recommended to set bStopTasksBetweenModes to true before the competition.
	resetAllMotorEncoders();	//resets all I2C motor encoders

	threshold = 15; //Threshold variable for deadzones in usercontrol, default is 15.

	program0 = "Program";
	program1 = "Program";
	program2 = "Program";
	program3 = "Program";
	program4 = "Program";	//Name your autonomous programs here. Numbers here match the case numbers in autonomous.
	program5 = "Program";
	program6 = "Program";
	program7 = "Program";
	program8 = "Program";
	program9 = "Program";

	//any code you wish to run at startup (reset encoders, set servo positions ect.) should be placed here

//////////////////////////
	startTask(lcdScreen);	//	<---Starts lcd program selection task, do not modify or remove.
//////////////////////////

}	//end of pre_auton

task autonomous()	//autonomous segment
{
	autonReset:	//autonomous segment restart point
	switch(autonProgramSelect)
	{
		case 0:
setMotorTarget(port4,1000,75,true);

			//program0 code here
			break;
		case 1:
			//program1 code here
			break;
		case 2:
			//program2 code here
			break;
		case 3:
			//program3 code here
			break;
		case 4:
			//program4 code here
			break;
		case 5:
			//program5 code here
			break;
		case 6:
			//program6 code here
			break;
		case 7:
			//program7 code here
			break;
		case 8:
			//program8 code here
			break;
		case 9:
			//program9 code here
			break;
		default:	//this will run if selected case does not exist
			prepareToRunDefaultAutonProgram(0);	//prepare to run the case that matches the number here
			goto autonReset;	//restart autonomous segment
			break;
			}	//end of switch
}	//end of autonomous


task usercontrol()	//driver controlled segment
{
	while(true)	//Infinite loop, place code for driver controlled segment inside.
	{
		//analogStick(1);	//Calls value of specified analog stick on primary controller, with deadzones applied.
		motor[FTL] = analogStick(3); //left side front motor
		motor[BCL] = analogStick(3); //left side rear motor
		motor[FTR] = analogStick(2); //right side front motor
		motor[BCR] = analogStick(2); //right side rear motor
		motor[TPL] = analogStick(1); //Extra motor for gripper or Scissor lift
		motor[TPR] = analogStick(1); //Extra motor for gripper or Scissor Lift
		motor[BTL] = analogStick(1); //Extra motor for gripper or Scissor lift
		motor[BTR] = analogStick(1); //Extra motor for gripper or Scissor Lift

		//partnerAnalogStick(1);	//Calls value of specified analog stick on partner controller, with deadzones applied.
		motor[TPL] = partnerAnalogStick(2); //Extra motor for gripper or Scissor lift
		motor[TPR] = partnerAnalogStick(2); //Extra motor for gripper or Scissor Lift
		motor[BTL] = partnerAnalogStick(2); //Extra motor for gripper or Scissor lift
		motor[BTR] = partnerAnalogStick(2); //Extra motor for gripper or Scissor Lift
		motor[RC2] = partnerAnalogStick(3);
		motor[RC1] = partnerAnalogStick(3);

		}	//end of infinite loop
}	//end of driver control
//DON'T PLAY WITH THE VISE//
